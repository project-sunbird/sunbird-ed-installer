# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~

## Akka
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
akka {
    #loggers =["akka.event.Logging$DefaultLogger"]
    #log-config-on-start = true
}

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
#play.crypto.secret = "changeme"


## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# ~~~~~
play.i18n {
    # The application languages
    langs = [ "en" ]
}

## Play HTTP settings
# ~~~~~
play.http {
    ## Router
    # https://www.playframework.com/documentation/latest/JavaRouting
    # https://www.playframework.com/documentation/latest/ScalaRouting
    # ~~~~~
    # Define the Router object to use for this application.
    # This router will be looked up first when the application is starting up,
    # so make sure this is the entry point.
    # Furthermore, it's assumed your route file is named properly.
    # So for an application router like `my.application.Router`,
    # you may need to define a router file `conf/my.application.routes`.
    # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
    #router = my.application.Router
    #TO allow more data in request body
    parser.maxDiskBuffer=50MB
    parser.maxMemoryBuffer=50MB
}

## Netty Provider
# ~~~~~
play.server.netty {
    # If you run Play on Linux, you can use Netty's native socket transport
    # for higher performance with less garbage.
    #transport = "native"
    maxChunkSize = 30000000
}

## WS (HTTP Client)
# ~~~~~
libraryDependencies += javaWs

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
libraryDependencies += cache
#
play.cache {
    # If you want to bind several caches, you can bind the individually
    #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

//play.http.filters= filters.HealthCheckFilter

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
#logger.root=ERROR

# Logger used by the framework:
#logger.play=INFO

# Logger provided to your application:
#logger.application=DEBUG

# APP Specific config
# ~~~~~
# Application specific configurations can be provided here
application.global=Global

play.http.parser.maxMemoryBuffer = 900000K
play.http.parser.maxDiskBuffer = 900000K

play.server.http.port = 9000
# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# APP Specific config
# ~~~~~
# Application specific configurations can be provided here

# Cache-Manager Configuration
cache.type="redis"


search.es_conn_info="{{ .Values.global.elasticsearch.host }}:{{ .Values.global.elasticsearch.port }}"
search.fields.query={{ .Values.search.fields_query }}
search.fields.date= {{ .Values.search.fields_date }}
search.batch.size={{ .Values.search.batch_size }}
search.connection.timeout={{ .Values.search.connection_timeout }}

#Top N Config for Search Telemetry
telemetry.search.topn={{ .Values.dialcode.telemetry_search_topn }}
telemetry_env= {{ .Values.dialcode.telemetry_env }}
installation.id={{ .Values.global.installation.id }}

# Configuration for default channel ID
channel.default="{{ .Values.global.channel.default }}"

# Redis Configuration
redis {
    host:"{{ .Values.global.redis.host }}"
    port:"{{ .Values.global.redis.port}}"
    maxConnections:"{{ .Values.redisMaxConnections | default 128 }}"
}

# DIAL Code Configuration
dialcode.keyspace.name="{{ include "common.tplvalues.render" (dict "value" .Values.dialcode.keyspace_name "context" $) }}"
dialcode.keyspace.table="{{ .Values.dialcode.keyspace_table }}"
dialcode.max_count="{{ .Values.dialcode.max_count }}"

# System Configuration
system.config.keyspace.name="{{ include "common.tplvalues.render" (dict "value" .Values.dialcode.keyspace_name "context" $) }}"
system.config.table="{{ .Values.dialcode.systemconfig.keyspace_table }}"

#Publisher Configuration
publisher.keyspace.name="{{ include "common.tplvalues.render" (dict "value" .Values.dialcode.keyspace_name "context" $) }}"
publisher.keyspace.table="{{ .Values.dialcode.publisher.keyspace_table }}"

#QR coddes
qrcodes.keyspace.name="{{ .Values.dialcode.qrcodes_keyspace_name}}"
qrcodes.keyspace.table="{{ .Values.dialcode.qrcodes_keyspace_table}}"

#DIAL Code Generator Configuration
dialcode.strip.chars="0"
dialcode.length=6.0
dialcode.large.prime_number=1679979167

#DIAL Code ElasticSearch Configuration
dialcode.index="{{ .Values.dialcode.index }}"
dialcode.object_type="{{ .Values.dialcode.object_type}}"

# Cassandra Configuration
cassandra.lp.connection="{{ .Values.global.cassandra.host }}:{{ .Values.global.cassandra.port }}"
cassandra.lpa.connection="{{ .Values.global.cassandra.host }}:{{ .Values.global.cassandra.port }}"


# Consistency Level for Multi Node Cassandra cluster

cassandra.lp.consistency.level={{.Values.global.cassandra.consistency_level | default "LOCAL_QUORUM" }}

#Kafka Configuration
kafka {
    urls = "{{ .Values.global.kafka.host }}:{{ .Values.global.kafka.port }}"
    topic {
    send_enable = true
    graph_event = "{{ include "common.tplvalues.render" (dict "value" .Values.dialcode.graph_event "context" $) }}"
    }
}

jsonld {
    basePath = "{{ .Values.jsonld.basePath }}"
    type = "{{ .Values.jsonld.type }}"
    localPath = "{{ .Values.jsonld.localPath }}"
    ttl = {{ .Values.jsonld.ttl }}
    sb_schema = {{ .Values.jsonld.sb_schema}}
}

cloudstorage {
    metadata.replace_absolute_path="{{ .Values.dialcode.cloudstorage.metadata_replace_absolute_path }}"
    relative_path_prefix="{{ .Values.dialcode.cloudstorage.relative_path_prefix }}"
    read_base_path="{{ include "common.tplvalues.render" (dict "value" .Values.dialcode.cloudstorage.read_base_path "context" $) }}"
}

dial_id = "https://{{ .Values.global.domain }}/dial/{dialcode}"
dial_type = "https://{{ .Values.global.domain }}/ns/"
cloud_storage_container = "{{ .Values.global.public_container_name }}/dial"