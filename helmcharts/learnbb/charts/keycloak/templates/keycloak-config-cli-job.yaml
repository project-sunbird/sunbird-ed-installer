{{- /*
Copyright Broadcom, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

{{- if .Values.keycloakConfigCli.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-keycloak-config-cli" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: keycloak-config-cli
  {{- if or .Values.keycloakConfigCli.annotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" ( dict "values" ( list .Values.keycloakConfigCli.annotations .Values.commonAnnotations ) "context" . ) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $) | nindent 4 }}
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
  {{- end }}
spec:
  backoffLimit: {{ .Values.keycloakConfigCli.backoffLimit }}
  {{- if .Values.keycloakConfigCli.cleanupAfterFinished.enabled }}
  ttlSecondsAfterFinished: {{ .Values.keycloakConfigCli.cleanupAfterFinished.seconds }}
  {{- end }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.keycloakConfigCli.podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: keycloak-config-cli
      annotations:
        {{- if .Values.keycloakConfigCli.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.keycloakConfigCli.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "keycloak.serviceAccountName" . }}
      {{- include "keycloak.imagePullSecrets" . | nindent 6 }}
      restartPolicy: Never
      {{- if .Values.keycloakConfigCli.podSecurityContext.enabled }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.keycloakConfigCli.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.keycloakConfigCli.automountServiceAccountToken }}
      containers:
        - name: keycloak-config-cli
          image: {{ template "keycloak.keycloakConfigCli.image" . }}
          imagePullPolicy: {{ .Values.keycloakConfigCli.image.pullPolicy }}
          command:
            - java
            - -jar
            - /opt/bitnami/keycloak-config-cli/keycloak-config-cli.jar
          env:
            - name: KEYCLOAK_URL
              value: {{ printf "http://%s-headless:%d%s" (include "common.names.fullname" .) (.Values.containerPorts.http | int) (.Values.httpRelativePath) }}
            - name: KEYCLOAK_USER
              value: {{ .Values.auth.adminUser | quote }}
            - name: KEYCLOAK_PASSWORD
              value: {{ .Values.auth.adminPassword | quote }}
            - name: IMPORT_FILES_LOCATIONS
              value: /config/realm.json
            - name: KEYCLOAK_AVAILABILITYCHECK_ENABLED
              value: "true"
            - name: KEYCLOAK_IMPORT_STRATEGY
              value: OVERWRITE_EXISTING
            {{- if .Values.keycloakConfigCli.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.keycloakConfigCli.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: config-volume
              mountPath: /config
          {{- if .Values.keycloakConfigCli.resources }}
          resources: {{- toYaml .Values.keycloakConfigCli.resources | nindent 12 }}
          {{- else if ne .Values.keycloakConfigCli.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.keycloakConfigCli.resourcesPreset) | nindent 12 }}
          {{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: keycloak
            items:
              - key: realm.json
                path: realm.json
{{- end }}
