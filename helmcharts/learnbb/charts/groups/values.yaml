fullnameOverride: "groups"

replicaCount: 1

image:
  repository: sunbirded.azurecr.io/groups_service
  tag: "release-7.0.0_RC1_e82e95d_3"
  pullPolicy: IfNotPresent
  pullSecrets: []

podAnnotations: {}

podSecurityContext: {}
  # runAsNonRoot: true
  # runAsUser: 1001
  # fsGroup: 1001

securityContext: {}
  # readOnlyRootFilesystem: false
  # capabilities:
  #   drop:
  #   - ALL

service:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      targetPort: 9000

ingress: {}
  # enabled: false
  # annotations: {}
  # hosts:
  #   - host: chart-example.local
  #     paths:
  #     - /

resources:
  requests:
    cpu: 100m
    memory: 100M
  limits:
    cpu: 1
    memory: 1G

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

livenessProbe:
  httpGet:
    path: "/service/health"
    port: 9000
  initialDelaySeconds: 15
  periodSeconds: 15

readinessProbe:
  httpGet:
    path: "/service/health"
    port: 9000
  initialDelaySeconds: 15
  periodSeconds: 15

nodeSelector: {}
tolerations: []
affinity: {}

configmap:
  enabled: true
  mountPath: /config

serviceAccount:
  create: true

serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s
  labels: {} # additional labels e.g. release: prometheus
  honorLabels: true
  jobLabel: "app.kubernetes.io/name"

# Example values.yaml structure
initContainers: {}
  # - name: init-myservice
  #   image: busybox:1.28
  #   command: ['sh', '-c', "until nslookup kubernetes.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]

sidecars: {}
  # - name: log-reader # Sidecar container
  #   image: busybox # Use another busybox image
  #   command: ["/bin/sh"] # Override the default command
  #   args: ["-c", "tail -f /var/log/app.log"] # Run a shell script that tails the log file

commonAnnotations:
  reloader.stakater.com/auto: "true"

sunbird_cassandra_username: ""
sunbird_cassandra_password: ""
userorg_service_url: http://userorg-service:9000
content_service_url: http://search-service:9000
sunbird_user_service_search_url: /private/user/v1/search
sunbird_cs_search_url: /v3/search
sunbird_kafka_url: http://kafka:9092
max_group_members_limit: "150"
max_activity_limit: "100"
max_group_limit: "50"
enable_userid_redis_cache: "true"
groups_redis_ttl: "86400"
user_redis_ttl: "3600"
notification_service_base_url: http://notification-service:9000
notification_service_api_url: /v2/notification/send
enable_tenant_config: '*'
isMultiDCEnabled: "false"
java_options: "-Xmx500m"
log4j_java_options: '"-Dlog4j2.formatMsgNoLookups=true"'
sunbird_sso_realm: "sunbird"
sunbird_sso_client_id: "lms"
access_keys_location: "/keys/"
sunbird_sso_username: ""
sunbird_sso_password: ""
sunbird_keycloak_user_federation_provider_id: "cassandrafederationid"
sunbird_keycloak_required_action_link_expiration_seconds: "2592000"
sunbird_sso_client_secret: "lms_client_secret"
