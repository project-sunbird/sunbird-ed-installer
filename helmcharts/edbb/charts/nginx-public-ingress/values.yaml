nameOverride: "nginx-public-ingress"
fullnameOverride: "nginx-public-ingress"

replicaCount: 1

image:
  repository: sunbirded.azurecr.io/proxy
  tag: "release-7.0.0_8e6b2db_23"
  pullPolicy: IfNotPresent
  pullSecrets: []

podAnnotations: {}

podSecurityContext: {}
  # runAsNonRoot: true
  # runAsUser: 1001
  # fsGroup: 1001

securityContext: {}
  # readOnlyRootFilesystem: false
  # capabilities:
  #   drop:
  #   - ALL

service:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 80
    - name: https
      port: 443
      targetPort: 443

serviceMetrics:
  type: ClusterIP
  ports:
    - name: http
      port: 9145
      targetPort: 9145

ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
      - /

resources:
  requests:
    cpu: 100m
    memory: 100Mi
  limits:
    cpu: 1
    memory: 1G

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

# livenessProbe: {}
# Example:
livenessProbe: {}
  # httpGet:
  #   path: "/healthz"
  #   port: 8080
  # initialDelaySeconds: 5
  # periodSeconds: 5

# readinessProbe: {}
# Example:
readinessProbe: {}
  # httpGet:
  #   path: "/ready"
  #   port: 8080
  # initialDelaySeconds: 5
  # periodSeconds: 5

nodeSelector: {}
tolerations: []
affinity: {}

configmap:
  enabled: true

serviceAccount:
  create: true
  name: ""

serviceMonitor:
  enabled: true
  labels:
    release: monitoring
  # interval: 30s
  # scrapeTimeout: 10s
  # labels: {} # additional labels e.g. release: prometheus
  # honorLabels: true
  # jobLabel: "app.kubernetes.io/name"

# Example values.yaml structure
initContainers:
  # - name: init-myservice
  #   image: busybox:1.28
  #   command: ['sh', '-c', "until nslookup kubernetes.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
  - name: wait-for-keycloak
    image: busybox
    command: ["/bin/sh", "-c"]
    args:
    - "timeout 300 sh -c 'until nc -z keycloak 8080; do echo waiting for keycloak; sleep 10; done'"
  - name: wait-for-kong
    image: busybox
    command: ["/bin/sh", "-c"]
    args:
    - "timeout 300 sh -c 'until nc -z kong 8000; do echo waiting for kong; sleep 10; done'"
  - name: wait-for-player
    image: busybox
    command: ["/bin/sh", "-c"]
    args:
    - "timeout 300 sh -c 'until nc -z player 3000; do echo waiting for player; sleep 10; done'"

sidecars: {}
  # - name: log-reader # Sidecar container
  #   image: busybox # Use another busybox image
  #   command: ["/bin/sh"] # Override the default command
  #   args: ["-c", "tail -f /var/log/app.log"] # Run a shell script that tails the log file

global:
  domain: "example.com"
  local_development: false
  clusterDomain: "cluster.local"
  # -- configures DNS service name
  dnsService: "kube-dns"
  # -- configures DNS service namespace
  dnsNamespace: "kube-system"

commonAnnotations:
  reloader.stakater.com/auto: "true"
  service.beta.kubernetes.io/azure-load-balancer-external: "true" 

merge_domain: "merge.example.com"
merge_domain_status: true

proxy_private_key: |
  -----BEGIN PRIVATE KEY-----
  MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDI+v/838oEg1ES
  3XiRbKPMyzjr8IOF5s8+0LzQLioxsJIo32HIAGQIfW2C98ArSj/rwb/P7+vtPvNV
  DRzvh5qBZ6d6NRoUHR7Wt9LRGQmstksULEUzDGqpsYTXSxZSUHjs9mZ1wgPwb+7I
  Uy4+3R/toG9gAOE9m7LFsUNq1W3/ParhWfTaJiXcKaQaDyr+D4v6o/kBYA9JfVd+
  Pgesx+xSHGP7gkeNahGXUqU5c8uA8XJEG4JEFBHeEVOeUw2TKUC7aI+KGUG5WmLC
  DXAzaXJQCe+CsTHbtAd15niXlC31pFiLREi8gS39JGRlHMe7iNmLyXNapJz5oQP9
  /mEE9CgzAgMBAAECggEAP0z7Cojrxm8bvm7d9iO7FZoeZAWdTzPKq5SwG3um036z
  EkeFMyqYVyo2L01cC+Z3aohcIyCEdPViS7P1HKZfrglZMP7/pz0ixOsh7bTOnMTP
  sdtdsj3jbG4aknq2XZe19qCG1ekVN4nxscutIaSg1UW2Po0YZEChVm3F96SgYAbb
  DR4MEhAxHAQoqtWun5a/x9uFn1REfsAVxq6isFUR3KNQVbdc2FHr2yRf2JoO/I4x
  tFZGGGry+ereofd5un2Pqog84ZBtgS5BmmZ03otyFZXw9qdb94lBqbazzVv5PVpF
  HT2npsDfyf8DDDB7sY5UK/c3ceayKHXXnLaZqBabOQKBgQD8y14m1hAJS6RiMv7I
  VgBNNTB9KNGr4CbwBJjP+LKfcLWEzLjHIjNFqZ+FTQUeXO0bUOlNQIGOZskoqXB8
  bYeZdw07PEvHJ6RiCHNXZvQh1w56Lg9lmBiQV7p8ZgUBwhNZHur7/gWZ4RSwABPy
  WuMPmrNjkkNqwbezPKmAaJpkWwKBgQDLh253ik5Q8udjNwkGcu+yFFTgGde+SdKR
  iK8kFWTTtvDT+IZpQvpe8xkW63wYK5YUtAgwdCpGPOmxhCqSXOLIFpmbp/5qwUnr
  m7sCS3vfnk5trWDPExGJuLYKPpjFTwmCpQLaAZplwgx0alk1GONhrDyb2gnldygJ
  5pdhLQGzCQKBgGrrfTQB4CB+XNWn6flD3rbJI2wcgqomkXF9EEEOWEZ1fmDf0dtv
  zK3PM4hG7j5MYYDnNPYWrXVUZgqLt+b40JyJLRB7zTU7wBwypM433lQdyKLGrn5y
  2Rjb8iVBZSa8NkDAgfT5GNdfyscyET21UUo9TVh0+YzCyHbH1o1YMMz3AoGBALPS
  OZCWevFcW4G2S1wOSqbs/bxuOMZgVRHOUOexmz7PIGI37xGrYqhnYmB0uFRmlhg+
  pAmjaQJbqSH1IuPj+15LUXZMbCWIFzZ6hjTV2mFNbf/LMoBiWZlzwCq2+aVCWqW6
  AxX4WqDTXMuydpTKI4PVeEs+zoWVzKNKv67U4+55AoGAFX6Rb1A/3I2em9NZonNK
  F0EkVK3mQ8ESys64zD1F6aIyqBGlCri4HHSxzTmq5Y/LalbiWGlKR/G7MFfkQUDi
  ZiFUt1PZJDRLQBcRDvWq5IWidr2FuqTseFE0b20LiMV6uw6FAUDnkL2P1/xzh5cG
  H/iXAWvLC4SMgpWpZhJPGSI=
  -----END PRIVATE KEY-----
proxy_certificate: |
  -----BEGIN CERTIFICATE-----
  MIIDlzCCAn+gAwIBAgIUQCBDQj9V/xxpbVOPEuZSo92oZBYwDQYJKoZIhvcNAQEL
  BQAwWzELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM
  GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDEUMBIGA1UEAwwLZXhhbXBsZS5jb20w
  HhcNMjQwMTA2MTQ1NzI0WhcNMjUwMTA1MTQ1NzI0WjBbMQswCQYDVQQGEwJBVTET
  MBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQ
  dHkgTHRkMRQwEgYDVQQDDAtleGFtcGxlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQAD
  ggEPADCCAQoCggEBAMj6//zfygSDURLdeJFso8zLOOvwg4Xmzz7QvNAuKjGwkijf
  YcgAZAh9bYL3wCtKP+vBv8/v6+0+81UNHO+HmoFnp3o1GhQdHta30tEZCay2SxQs
  RTMMaqmxhNdLFlJQeOz2ZnXCA/Bv7shTLj7dH+2gb2AA4T2bssWxQ2rVbf89quFZ
  9NomJdwppBoPKv4Pi/qj+QFgD0l9V34+B6zH7FIcY/uCR41qEZdSpTlzy4DxckQb
  gkQUEd4RU55TDZMpQLtoj4oZQblaYsINcDNpclAJ74KxMdu0B3XmeJeULfWkWItE
  SLyBLf0kZGUcx7uI2YvJc1qknPmhA/3+YQT0KDMCAwEAAaNTMFEwHQYDVR0OBBYE
  FGKMHMcHXqgQ+cS6uoaS6iZaooKHMB8GA1UdIwQYMBaAFGKMHMcHXqgQ+cS6uoaS
  6iZaooKHMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHGKDZ1t
  MmqbRUsP3KSlgqVYQF4Iu0A0HlPvwcWVhRNozlm/luQ4It5O0kYXjiIeetD3LqyQ
  QgVLPkS3im9jQuLRtHT0lJaB6cewDSdI6QbpGIU/PBYKblKLlTRKc69I7B2ezTLR
  XPv1VNUAe6HaxZBNVL8JGEIJunDdZeZLoBtLymmKqEE8B11/pP5jw+/4DkQmyOiX
  Q0SiDIO6iak05GhU3PhKPmOTBAYxvzpvEgV3+OAhcYcpnEb+2WuqQumvibdcjxYS
  Xt0PGTeyUkz7dtwiwjYWsG9yYu9m6o790NYWHbr7VqTB7X8jmqQ7FT+OFLUbzWlK
  mIyfDj9AwvHHxzA=
  -----END CERTIFICATE-----
nginx_per_ip_connection_limit: 400

cache_long_validity: 5m
cache_medium_validity: 4m
large_cache_keys: 10m
medium_cache_keys: 5m
small_cache_keys: 2m
large_cache_size: 100m
medium_cache_size: 50m
small_cache_size: 20m
large_cache_inactive: 10m
medium_cache_inactive: 10m
small_cache_inactive: 10m

apple_universal_links: '{"applinks":{"apps":[],"details":[{"appID":"123456.dev.sunbird.app","paths":["/explore","/dial/*","/get/dial","/play/content","/play/collection","/learn/course","/explore-course/course","/explore-course","/search","/search/Library","/faq","/profile","/play/quiz","/explore","/learn","/resources"]}]}}'

lets_encrypt_ssl: false