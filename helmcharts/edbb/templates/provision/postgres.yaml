apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Chart.Name }}-postgres-migration-job
  labels:
    app: {{ .Chart.Name }}-postgres-migration
    scope: provisioning
  annotations:
    {{.Values.global.postgresql.provisioning.annotations | toYaml }}
spec:
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}-postgres-migration
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-postgres
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c']
        args:
        - "timeout {{ .Values.migration.postgresql.waitTime }} sh -c 'until nc -z {{ .Values.global.postgresql.host }} {{ .Values.global.postgresql.port }}; do echo waiting for postgres; sleep 10; done'"
      containers:
      - name: migration
        image: {{ .Values.global.postgresql.image.registry }}/{{ .Values.global.postgresql.image.repository }}:{{.Values.global.postgresql.image.tag }}
        imagePullPolicy: IfNotPresent
        command: ['bash', '-c']
        securityContext:
          runAsUser: 0
        args:
        - |
            set -e
            export devops_branch={{ .Values.devops_release_branch }}
            export PGHOST={{.Values.global.postgresql.host}}
            export PGPORT={{.Values.global.postgresql.port}}
            export PGUSER={{.Values.global.postgresql.postgresqlUsername}}
            export PGPASSWORD={{.Values.global.postgresql.postgresqlPassword}}
            {{- range .Values.global.postgresql.databases }}
            # Check if the database exists
            if ! psql -lqt | cut -d \| -f 1 | grep -qw {{.name}}; then
              # Database doesn't exist, create it
              echo "SELECT 'CREATE DATABASE \"{{ .name }}\"' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '\"{{ .name }}\"')\gexec" | psql
            else
                echo "Database {{.name}} already exists."
            fi
            {{- end }}

            echo "PostgreSQL setup completed."
  backoffLimit: 30
