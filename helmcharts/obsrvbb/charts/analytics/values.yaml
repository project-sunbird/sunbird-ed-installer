nameOverride: "analytics"
fullnameOverride: "analytics"
replicaCount: 1
image:
  registry: sunbirded.azurecr.io
  repository: sunbird-analytics-service
  tag: release-5.1.4
imagePullSecrets: ""

podAnnotations: {}

podSecurityContext: {}
  # runAsNonRoot: true
  # runAsUser: 1001
  # fsGroup: 1001

securityContext:
  readOnlyRootFilesystem: false
  capabilities:
    drop:
    - ALL

ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
      - /
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

resources:
  requests:
    cpu: 500m
    memory: 1G
  limits:
    cpu: 1
    memory: 2G
service:
  type: ClusterIP
  protocol: TCP
  ports:
    - name: http-analytics
      port: 9000
      targetPort: 9000
livenessProbe:
  failureThreshold: 5
  httpGet:
      path: /health
      port: 9000
  initialDelaySeconds: 15
  periodSeconds: 15
  timeoutSeconds: 5
readinessProbe:
  failureThreshold: 5
  httpGet:
      path: /health
      port: 9000
  initialDelaySeconds: 15
  periodSeconds: 15
  timeoutSeconds: 5

nodeSelector: {}
tolerations: []
affinity: {}

configmap:
  enabled: true

strategy:
  maxSurge: 25%
  maxUnavailable: 25%

serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  labels:
    release: monitoring
  honorLabels: true
  jobLabel: "app.kubernetes.io/name"

serviceAccount:
  create: true
  name: ""

## Can be one of - azure, aws, gcloud, oci
cloud_service_provider: "oci"
cassandra_keyspace_prefix: "{{ .Values.global.env }}_"
postgres_db: "analytics"
# postgres_user: "postgres"
# postgres_pass: "postgres"
postgres_table_name: "{{ .Values.global.env }}_consumer_channel_mapping"
postgres_table_geo_location_city_name: "{{ .Values.global.env }}_geo_location_city"
postgres_table_geo_location_city_ipv4_name: "{{ .Values.global.env }}_geo_location_city_ipv4"
postgres_table_report_config_name: "{{ .Values.global.env }}_report_config"
postgres_table_job_request_name: "{{ .Values.global.env }}_job_request"
postgres_table_experiment_definition_name: "{{ .Values.global.env }}_experiment_definition"
postgres_table_dataset_metadata_name: "{{ .Values.global.env }}_dataset_metadata"
user_profile_read_url: "http://userorg-service:9000/v1/user/read/"
org_search_url: "http://userorg-service:9000/v1/org/search"
dataexhaust_super_admin_channel: "sunbird"
exhaust_api_consumer_ids: exhaust_api_consumer_ids
channel_data_exhaust_bucket: "{{ .Values.global.public_container_name }}/telemetry-data-store"
public_data_exhaust_bucket: "datasets"
proxy_server_name: proxy_server_name # TODO check with the team if its needed. In staging this url doesn't exists
public_exhaust_datasets: ['public-data-exhaust']
data_exhaust_batch_limit: 20
dp_play_http_secret_key: "long-secret-to-calm-entropy-gods"          # Random 32+ character string


envoy_probes:
  failureThreshold: 2
  httpGet:
    path: /ready
    port: 10000
    scheme: HTTP
  initialDelaySeconds: 5
  periodSeconds: 15
  timeoutSeconds: 5


opa_probes:
  failureThreshold: 3
  httpGet:
    path: /health?plugins
    port: 8282
    scheme: HTTP
  initialDelaySeconds: 5
  periodSeconds: 15
  timeoutSeconds: 5

envoy_resources:
  requests:
    cpu: "100m"
    memory: "100Mi"
  limits:
    cpu: "1"
    memory: "1024Mi"

opa_resources:
  requests:
    cpu: "100m"
    memory: "100Mi"
  limits:
    cpu: "1"
    memory: "1024Mi"

init_container_resources:
  requests:
    cpu: "100m"
    memory: "100Mi"
  limits:
    cpu: "1"
    memory: "1024Mi"

opa_enabled: false

commonAnnotations:
  reloader.stakater.com/auto: "true"
